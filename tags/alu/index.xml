<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Alu on Relay Computer</title><link>https://relaycomputer.co.uk/tags/alu/</link><description>Recent content in Alu on Relay Computer</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Tue, 19 Aug 2014 18:22:00 +0100</lastBuildDate><atom:link href="https://relaycomputer.co.uk/tags/alu/index.xml" rel="self" type="application/rss+xml"/><item><title>ALU &amp; Registers A-D Test with new Display Cards</title><link>https://relaycomputer.co.uk/posts/2014/08/alu-registers-d-test-with-new-display/</link><pubDate>Tue, 19 Aug 2014 18:22:00 +0100</pubDate><guid>https://relaycomputer.co.uk/posts/2014/08/alu-registers-d-test-with-new-display/</guid><description>Now that the two display cards are complete enough to display and control the status of the ALU and four registers (A-D) it’s time to fit them to the upper enclosure. With that done the upper enclosure can then be connected to the lower enclosure and everything can be given a test together.
The upper enclosure is constructed very similarly to the lower enclosure … as before, out of aluminium profile. Here’s a Sketchup image of how the upper enclosure should look when sat on top of the lower enclosure:</description></item><item><title>Completed ALU</title><link>https://relaycomputer.co.uk/posts/2014/03/completed-alu/</link><pubDate>Sun, 30 Mar 2014 12:15:00 +0100</pubDate><guid>https://relaycomputer.co.uk/posts/2014/03/completed-alu/</guid><description>Following my last post on the completed backplane I’m now in a position to connect all the other completed cards together to test the full ALU. The ALU is made up of the logic, arithmetic and control cards and here’s how those cards look when plugged in to the backplane:
… and when viewed from the top and back …
… and finally here’s the four cards laid out side by side:</description></item><item><title>ALU Construction: Completed Backplane</title><link>https://relaycomputer.co.uk/posts/2014/03/alu-construction-completed-backplane/</link><pubDate>Wed, 26 Mar 2014 21:57:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2014/03/alu-construction-completed-backplane/</guid><description>In my last post I mentioned I’d suffered a bit of a set back with the construction of the ALU backplane. Well, the short version of things is that I’ve admitted defeat and constructed a new backplane using a different design … it looks like this:
This design uses stackable headers instead of regular sockets so that the pins extend out of the back of the card far enough to attach an IDC connector. Each of these connectors can then be ‘daisy chained’ together with ribbon cable making construction relatively quick and easy to do.</description></item><item><title>ALU Construction: Completed Control Card Full Test</title><link>https://relaycomputer.co.uk/posts/2014/03/alu-construction-completed-control-card/</link><pubDate>Sun, 16 Mar 2014 08:59:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2014/03/alu-construction-completed-control-card/</guid><description>The ALU Control Card is now complete and looks like this:
This card was, on the whole, much simpler and quicker to put together than previous cards (despite me initially messing up the zero detection relay positions). As the card isn’t too busy I’ve arranged the wiring away from the empty part of the card so there’s room for future expansion or modifications if needed in the future. Not entirely sure what they’d actually be but you never know.</description></item><item><title>ALU Construction: Control Card Power Rails &amp; Wire Wrap</title><link>https://relaycomputer.co.uk/posts/2014/03/alu-construction-control-card-power/</link><pubDate>Fri, 14 Mar 2014 19:51:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2014/03/alu-construction-control-card-power/</guid><description>I’ve been a bit short of time lately so I’ve been working on the ALU Control Card in little bursts … but after lots of these little bursts I’ve now got all the power rails and wire wrap done for this card.
Here’s the card as it currently stands:
… and this is how the power rails look on the solder side of the card …</description></item><item><title>ALU Construction: Control Card Header Pins &amp; Relay Sockets</title><link>https://relaycomputer.co.uk/posts/2014/03/alu-construction-control-card-header/</link><pubDate>Tue, 04 Mar 2014 18:03:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2014/03/alu-construction-control-card-header/</guid><description>Following on from the first two successfully completed ALU cards, for logic and arithmetic, it’s time to make a start on the control card (well, actually, the LEDs and connectors are already done from earlier but you get the gist). The control card performs three functions: control registers, function decoding and zero detection … and thankfully this card is much simpler than the previous two in terms of relay count and sheer amount of soldering so should come together relatively quickly.</description></item><item><title>ALU Construction: Completed Arithmetic Card Full Test</title><link>https://relaycomputer.co.uk/posts/2014/02/alu-construction-completed-arithmetic/</link><pubDate>Sun, 23 Feb 2014 17:31:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2014/02/alu-construction-completed-arithmetic/</guid><description>The ALU arithmetic card is now complete! The final card looks like this:
As I did for the ALU logic card before I’ve put the following YouTube video together which gives a walkthrough of the arithmetic card in operation … and as before this one also has a narrative track delivered by my own fair gob.
So, that’s two out of the three ALU cards done with just the control card left to do. Well, I say that … after the ALU is completed there’s all those registers let alone all the control and timing circuitry coming up … I’ll try not to think too much about the impending work for now.</description></item><item><title>ALU Construction: Arithmetic Card Wire Wrap 2</title><link>https://relaycomputer.co.uk/posts/2014/02/alu-construction-arithmetic-card-wire_19/</link><pubDate>Wed, 19 Feb 2014 22:37:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2014/02/alu-construction-arithmetic-card-wire_19/</guid><description>I’ve managed to squeeze in a couple more wire wrapping sessions this week so in this post there’s a few photos of progress so far.
Inputs B and C are fully wired in now as is the data bus output. As all the wiring is now complete on the arithmetic 1-bit units I’ve popped the relays in.
The next wire links to add are the control lines which select either the Add or Increment operation and then once that’s done the card should be ready for powering up and testing/debugging.</description></item><item><title>ALU Construction: Arithmetic Card Wire Wrap 1</title><link>https://relaycomputer.co.uk/posts/2014/02/alu-construction-arithmetic-card-wire/</link><pubDate>Sun, 16 Feb 2014 10:04:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2014/02/alu-construction-arithmetic-card-wire/</guid><description>Fear not (just in case you were for some reason) all this talk of Sketchup and enclosures and so on hasn’t totally diverted me from the main task of constructing the ALU. The wire wrap is coming along nicely on the arithmetic card although it has taken slightly more concentration than before to get all the wraps in the right places.
Here’s a couple of pictures showing the card in its current state of progress:</description></item><item><title>ALU Construction: Arithmetic Card Power Rails</title><link>https://relaycomputer.co.uk/posts/2014/01/alu-construction-arithmetic-card-power/</link><pubDate>Sun, 26 Jan 2014 23:26:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2014/01/alu-construction-arithmetic-card-power/</guid><description>Another round of soldering done … this time putting down the power rails on the arithmetic card along with some soldered wire links. This is the last of the soldering for this card - it’s all wire wrapping form hereon in.
The rear of the card now looks like this:
The power rails are very similar to the ones of the logic card completed earlier and they were just as fiddly to complete too … although, that said, I do seem to be developing a bit of a ‘sixth sense’ for how long a wire should be cut without measuring it.</description></item><item><title>ALU Construction: 1-bit Arithmetic Full Construction</title><link>https://relaycomputer.co.uk/posts/2014/01/alu-construction-1-bit-arithmetic-full/</link><pubDate>Tue, 21 Jan 2014 18:25:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2014/01/alu-construction-1-bit-arithmetic-full/</guid><description>So, as mentioned in my last post this time I’ve put in the wire links and wraps needed to test the first bit of the arithmetic card. With these in place I can make sure everything works as it should before repeating it all eight times over to make the full 8-bit adder.
As a quick reminder here’s the diagram for the 1-bit full adder:
Reproducing this on the arithmetic card gives the following (on the front of the card):</description></item><item><title>ALU Construction: Arithmetic Card Relay Sockets</title><link>https://relaycomputer.co.uk/posts/2014/01/alu-construction-arithmetic-card-relay/</link><pubDate>Fri, 17 Jan 2014 23:23:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2014/01/alu-construction-arithmetic-card-relay/</guid><description>It’s always a fiddly job getting the relay sockets soldered in and the ALU arithmetic card proved no exception. With this in mind I’ve been spreading the work out over several mini sessions in accordance with my new post-Xmas lack of patience. Therefore it’s taken me a bit longer than it would otherwise to complete this stage of construction although to be fair I also got distracted with a Nixie clock kit my partner bought me for Christmas … and I ran out of solder (this time though I’ve finally stumped up the cash to buy a 500g reel which should keep me going for a good while). Anyho, after much procrastination all the sockets (and diodes) are now on.</description></item><item><title>ALU Construction: Arithmetic Card Header Pins</title><link>https://relaycomputer.co.uk/posts/2014/01/alu-construction-arithmetic-card-header/</link><pubDate>Mon, 06 Jan 2014 22:18:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2014/01/alu-construction-arithmetic-card-header/</guid><description>Following on from the successful construction of the ALU logic card in my last post it’s time to start off the new year with the next ALU card (number 2 of 3 ALU cards in total) … the arithmetic card. As for the logic card I’ll begin by soldering down all the header pins that will be wire wrapped to later on (the LEDs and connectors were already added to this card earlier).</description></item><item><title>ALU Construction: Completed Logic Card Full Test</title><link>https://relaycomputer.co.uk/posts/2013/12/alu-construction-completed-logic-card/</link><pubDate>Wed, 18 Dec 2013 08:26:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/12/alu-construction-completed-logic-card/</guid><description>The ALU logic card is now finally complete! … well, it is now I’ve popped the last few relays into their sockets. The final card looks like this:
As the old saying goes: a picture paints a thousand words … I’m not sure therefore how many words a video paints but it definitely seems the best way to demonstrate the card in operation. So, with that in mind, I’ve (painstakingly) put the following YouTube video together which gives a walkthrough of the ALU logic card in operation. This one also breaks tradition with my previous videos, where the only sound is the relays clicking, and has a narrative track added courtesy of my very own ‘dulcet’ tones.</description></item><item><title>ALU Construction: Logic Card Wire Wrap 3</title><link>https://relaycomputer.co.uk/posts/2013/12/alu-construction-logic-card-wire-wrap-3/</link><pubDate>Wed, 18 Dec 2013 08:01:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/12/alu-construction-logic-card-wire-wrap-3/</guid><description>I’m now just one session of wire wrapping away from a completed ALU logic card. The final job is to wire up the gating relays that select one of the five logic results back on to the data bus. Nothing too difficult … just a case of routing the wires in the best way possible to keep things neat and out of the way of the relay sockets.
Keeping with the same wiring colour convention as before the green wires are the results heading out to the data bus, the blue wires are the inputs B and C and the yellow wires are the control lines which activate each of the gating relays as required.</description></item><item><title>ALU Construction: 8-bit Logic Unit Tests</title><link>https://relaycomputer.co.uk/posts/2013/12/alu-construction-8-bit-logic-unit-tests/</link><pubDate>Thu, 12 Dec 2013 19:20:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/12/alu-construction-8-bit-logic-unit-tests/</guid><description>There’s now enough sockets, solder and wires to test all eight bits of the ALU logic card. This isn’t quite a full test as the gating relays that apply one of the results produced by each bit unit haven’t been wired up yet but there’s enough there to be able to set an input and see the results displayed on the LEDs along the front of the card.
So, it’s time to crack out the relays and pop them in the sockets that make up each logic bit unit. There’s four relays needed in each logic bit unit so thats 32 relays in total and this is what it looks like:</description></item><item><title>ALU Construction: Logic Card Wire Wrap 2</title><link>https://relaycomputer.co.uk/posts/2013/12/alu-construction-logic-card-wire-wrap-2/</link><pubDate>Thu, 12 Dec 2013 18:57:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/12/alu-construction-logic-card-wire-wrap-2/</guid><description>Continuing on with the wire wrapping for the ALU logic card next up is the input and result links:
Given the limited range of colours I’ve got to choose from (Black, Red, Green, Blue, Yellow) I’ve chosen the following scheme for the wire links:
Black: Internal wire links Red: Power links Blue: Input links Green: Result links Yellow: Control links I’ll no doubt break this convention at some point but in general it should make the cards a little bit easier to fathom out at first glance … especially as the number of wires on the board increases.</description></item><item><title>ALU Construction: Logic Card Wire Wrap 1</title><link>https://relaycomputer.co.uk/posts/2013/12/alu-construction-logic-card-wire-wrap-1/</link><pubDate>Thu, 12 Dec 2013 18:41:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/12/alu-construction-logic-card-wire-wrap-1/</guid><description>Finally, with all the soldering now done, it’s time to set about wire wrapping the ALU logic card. First up is the internal connections within each logic bit:
After wire wrapping a new set of wires I always run the multimeter over the board to double check everything is connected as intended. Again though, if there are any mis-wirings it’s trivial to correct — just unwrap the wire and wrap in a new one. There is a bit of skill required to get a ‘perfect’ wrap (where a bit of the insulation is taken around the post followed by nice tight coils above that) and mine are certainly not all perfect but bad ones can always be re-done.</description></item><item><title>ALU Construction: Logic Card Power Rails</title><link>https://relaycomputer.co.uk/posts/2013/12/alu-construction-logic-card-power-rails/</link><pubDate>Tue, 10 Dec 2013 22:56:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/12/alu-construction-logic-card-power-rails/</guid><description>It seems that every time I move on to the next stage of construction on the ALU logic card it’s fiddlier than the stage before it … this stage is no exception. This time I’m adding the power and ground rails that run around the solder side of the board. I’ll start with a picture of how it looks:
The really, really, fiddly bit this time is cutting all those lengths of (solid single core) wire to the required length and then stripping the insulator, bending the ends and soldering down — nothing complex … just fiddly. As part of adding these rails I’ve laid down some additional header pins up the middle of the board to get power to the relay gates as needed. Following usual convention the 12V power rails are in red and the ground rails are in black.</description></item><item><title>ALU Construction: Logic Card Relay Sockets</title><link>https://relaycomputer.co.uk/posts/2013/12/alu-construction-logic-card-relay/</link><pubDate>Mon, 09 Dec 2013 07:27:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/12/alu-construction-logic-card-relay/</guid><description>The construction of the ALU logic card is coming along nicely but there’s still a lot of soldering ahead to get all the relay sockets down … and this part is the fiddliest bit yet.
The biggest issue I’ve found getting the sockets in place is that unlike the header pins, which tend to stay in place on the board whilst you solder them, the sockets will keep falling out. Usually if I’m soldering components down I’ll work in order of height from shortest to tallest so that when the board is turned over the components have nowhere to go … unfortunately because I started with the LEDs first there’s nothing to hold the sockets in place when soldering. To get around this I’ve had to develop a new skill where I hold the socket in with a finger on one hand and then pick and place a blob of solder with the other hand (remembering which pin I’ve got my finger on to avoid a nasty burn). Needless to say I’ll try and make sure I do things in the ‘right’ order on the other cards ;)</description></item><item><title>ALU Construction: Logic Card Header Pins</title><link>https://relaycomputer.co.uk/posts/2013/12/alu-construction-logic-card-header-pins/</link><pubDate>Sun, 08 Dec 2013 09:57:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/12/alu-construction-logic-card-header-pins/</guid><description>Following on from the successful construction of the first bit on the ALU logic card in my last post it’s now time to start putting together the other 7 bits and the gating circuits (to place one of the logic results on to the data bus). First up is soldering down all the header pins that I’ll wire wrap to.
This part of the construction is certainly repetitive and it’s easy to make mistakes … and actually I made a couple within placing down the first few headers. Suffice to say that it’s a lot easier to solder multi-leg components than it is to unsolder them. Here’s the result of this evenings work:</description></item><item><title>ALU Construction: 1-bit Logic Full Construction</title><link>https://relaycomputer.co.uk/posts/2013/12/alu-construction-1-bit-logic-full/</link><pubDate>Sat, 07 Dec 2013 01:54:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/12/alu-construction-1-bit-logic-full/</guid><description>So, although I probably should construct the logic card methodically a full stage at a time (solder header pins then sockets then wire wrap) I can’t resist fully assembling a single bit alone to see if/how it works. Here of some pictures of that single bit all soldered in and wired up:
This is the first bit logic unit out of 8 in total and effectively the pattern is repeated 4 times across the board and for 2 rows up the board. One thing I was definitely reminded of when putting this first bit together is how small components on a 0.1 inch pitch actually are and it really is quite fiddly work. Again, the soldering is a bit grizzly where I’ve joined several pads together and couldn’t keep the heat up and solder flowing.</description></item><item><title>ALU Construction: LED Tests</title><link>https://relaycomputer.co.uk/posts/2013/12/alu-construction-led-tests/</link><pubDate>Fri, 06 Dec 2013 20:55:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/12/alu-construction-led-tests/</guid><description>Following on from my last post I can now test the LEDs that have been soldered and hooked up to the header pins on each of the three ALU cards (Logic, Arithmetic and Control). As promised, here are the videos of said testing:
You might notice I’m prodding around slightly more carefully on the arithmetic and control cards … due to a lack of foresight I’ve ended up with every second header pin being a direct line to 0v … which is not great when the thing I’m holding has 12v at the tip. Luckily my power supply handles short circuits well but even the briefest of sparks can be a tad embarrassing. At some point I’ll chop off the extraneous header pins (as they’re not needed) to ensure I don’t accidentally wire-wrap to one of them later on.</description></item><item><title>ALU Construction: Logic Card Wire Links</title><link>https://relaycomputer.co.uk/posts/2013/12/alu-construction-logic-card-wire-links/</link><pubDate>Fri, 06 Dec 2013 20:51:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/12/alu-construction-logic-card-wire-links/</guid><description>Before I can test all of the LEDs laid down so far (to make sure they survived the heat of the soldering iron) I need to add some wire links on the logic card between the LED anodes and the header pins. This isn’t needed on the arithmetic and control cards as they only have a single row of LEDs and so are soldered directly to the header pins but on the logic card, which has two rows of LEDs, the ’negative rail’ sits between the LED anodes and header pins.</description></item><item><title>ALU Construction: LED Header Pins</title><link>https://relaycomputer.co.uk/posts/2013/12/alu-construction-led-header-pins/</link><pubDate>Thu, 05 Dec 2013 21:46:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/12/alu-construction-led-header-pins/</guid><description>So far, in the construction of the three ALU cards (Logic, Arithmetic and Control) I’ve soldered down the connectors and LEDs. It’s now time to solder in some header pins and join them to the existing connectors and LEDs ready for wire-wrapping later.
You can get proper wire-wrap posts but they’re really expensive for what they are (mainly, I guess, because it’s quite an old-fashioned construction method). I’ve found, though, that header pins do the job just as well but being as they’re not as tall you can only get a maximum of two wraps on each pin. Incidentally, I’ve chosen wire-wrap for most of the cards inner connections as it allows easy and quick modifications and correction of errors (something that can be quite difficult with soldered connections or pretty impossible with etched PCBs). Additionally, I quite like the finished look you get with wire-wrap.</description></item><item><title>ALU Construction: Connectors and LEDs</title><link>https://relaycomputer.co.uk/posts/2013/12/alu-construction-connectors-and-leds/</link><pubDate>Mon, 02 Dec 2013 18:05:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/12/alu-construction-connectors-and-leds/</guid><description>As promised in my last post it’s finally time to get the soldering iron out and make a start on constructing the three cards that make up the ALU. I’m going start by laying down the connectors and LEDs on each card to make sure I’m happy with the look and feel of things and then I can move on to everything else needed later.
As mentioned in earlier posts I’m basing my construction around 55 x 40 hole pad boards which fit my designs quite nicely at the right sort of size I’m looking to construct at. The connectors are right angled box headers and are simply soldered down to the back of the boards whilst the LEDs run along the front. The LEDs themselves are 3mm 12V types so that an additional resistor is not required (which would make the ‘crammed in’ Logic unit design even more tricky) and to make construction a bit more manageable each LED sits in a right angled holder.</description></item><item><title>ALU Design: Control Unit</title><link>https://relaycomputer.co.uk/posts/2013/12/alu-design-control-unit/</link><pubDate>Sun, 01 Dec 2013 21:21:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/12/alu-design-control-unit/</guid><description>In the last three posts I introduced the design for the 3-to-8 Function Decoder, Zero Detect circuit and the Condition Registers. In this post I’ll put all three of these components together to make up the ALU Control Card. So, placing the relays from the three components onto the card (excluding wire links) we get the following:
ALU Control Card Relays (larger) Unlike the other cards that make up the full ALU (the logic and arithmetic cards) things aren’t quite so tightly packed in this time. Despite this I’ve pushed the relays out towards the edges of the card to leave room for any future ALU control expansion or modifications without requiring an extra card. I’ll be displaying the current state of the 3-to-8 Decoder and Condition Registers with LEDs along the front of the card as with the other cards designed so far. The LEDs are the same 12V ones as before (to save space that would be used by the additional resistors) and follow the same colour code of red for results, yellow for inputs and green for output control signals. Diagram wise the display looks like this:</description></item><item><title>ALU Design: Condition Registers</title><link>https://relaycomputer.co.uk/posts/2013/11/alu-design-condition-registers/</link><pubDate>Sat, 30 Nov 2013 10:12:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/11/alu-design-condition-registers/</guid><description>This post covers the design of the ALU Condition Registers which along with the 3-to-8 Function Decoder and Zero Detect circuit (both covered in my previous posts) make up the ALU Control Card. There are three Condition Registers in this computer:
Carry: set when a bit is carried in the Arithmetic Unit (which can also indicate arithmetic overflow depending on the interpretation of the numbers being added). Zero: set when the ALU result is zero (all bits are off). Sign: set when the most significant bit is set (which would indicate a negative result for signed values). This condition has no direct meaning for unsigned numbers (other than indicating the number has a value of 128 or more). When the ALU performs an operation the current values of these three conditions are stored in the condition registers so that they can be referred to in other operations. An example of this would be where given two numbers the first is negated and then added to the second … if the two numbers are equal it will result in zero and therefore the Zero condition will be set. Based on this condition register being set you could then branch to a different location in the executing program if desired. That is, for example, if number A and B are equal then go to line C in the program. It’s this ‘branching’ functionality that elevates the computer in terms of power and flexibility and the condition registers are at the heart of this.</description></item><item><title>ALU Design: Zero Detect</title><link>https://relaycomputer.co.uk/posts/2013/11/alu-design-zero-detect/</link><pubDate>Sat, 23 Nov 2013 08:57:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/11/alu-design-zero-detect/</guid><description>This post covers the design of the Zero Detect circuit which along with the 3-to-8 Function Decoder (covered in my last post) and the Condition Registers (next post) make up the ALU Control Card. The Zero Detect circuit … wait for it … detects when a value is zero. The value in question is taken from the data bus so in effect we’re detecting when no bits are set. The output from this circuit is then passed to the Condition Registers so that the current value can be stored for future operations. The circuit itself is nice and simple:</description></item><item><title>ALU Design: Function Decoder</title><link>https://relaycomputer.co.uk/posts/2013/11/design-function-decoder/</link><pubDate>Wed, 20 Nov 2013 22:18:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/11/design-function-decoder/</guid><description>This post covers the design of a 3-to-8 Function Decoder which along with the Zero Detect circuit and Condition Registers will all go in to the ALU Control Card. The Decoder takes a 3-bit ALU Function code as its input and activates 1 of 8 control lines accordingly. The function codes are as follows:
Code Operation Description 000 CLR Clear/No Operation 001 ADD B + C 010 INC Increment B 011 AND B AND C 100 OR B OR C 101 XOR B XOR C 110 NOT NOT C 111 SHL Shift Left B The control lines which are fed to the Arithmetic and Logic Units via the Ctrl-Z bus are:</description></item><item><title>ALU Design: 8-bit Arithmetic Unit</title><link>https://relaycomputer.co.uk/posts/2013/11/design-8-bit-arithmetic-unit/</link><pubDate>Sun, 17 Nov 2013 10:43:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/11/design-8-bit-arithmetic-unit/</guid><description>In the last post I introduced the design for the 1-bit Arithmetic Unit. This post covers connecting eight of these units together to make an 8-bit Arithmetic Unit along with result gating and increment functionality.
So, diving straight in, here is what eight of the 1-bit Arithmetic Units look like all together on the usual 55 x 40 hole pad board (excluding wire lines):
8 x 1-bit Arithmetic Unit Relays (larger) As before (with the Logic Unit card) things are a bit on the tight side but everything fits within the 40 hole horizontal confines of the pad board (as if by magic). Each of the 1-bit Arithmetic Units produces a 1-bit output and these need gating back on to the data bus so that the result doesn’t conflict with any other Logic Unit output (or any future outputs from places like the Registers etc). With these additional relays added we get the following (this time including internal wire links in the 1-bit Arithmetic Units and result links between the Arithmetic Units and the gating relays):</description></item><item><title>ALU Design: 1-bit Arithmetic Unit</title><link>https://relaycomputer.co.uk/posts/2013/11/design-1-bit-arithmetic-unit/</link><pubDate>Fri, 15 Nov 2013 22:33:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/11/design-1-bit-arithmetic-unit/</guid><description>This post covers the design of a 1-bit Arithmetic Unit that can add two input bits together (B and C) with carry in and out. Here’s a schematic of the 1-bit Arithmetic Unit (based directly on the one used in the Harry Porter Relay Computer):
The diagram shows two 4PDT relays (just as before for the 1-bit Logic Unit) but this time the second relay has been rotated 180 degrees to make the diagram simpler to draw. B and C are the two 1-bit inputs that drive the relay coils, V is a permanent connection to the power supply and R is the resulting bit. CI is the carry in signal along with its inverted partner ~CI. Similarly CO is the carry output and ~CO is its inverted partner. It’s the use of these regular and inverted carry signals that makes this design so neat … and actually this isn’t one of Harry’s … this design goes back a lot further.</description></item><item><title>ALU Design: 8-bit Logic Unit</title><link>https://relaycomputer.co.uk/posts/2013/11/design-8-bit-logic-unit/</link><pubDate>Wed, 13 Nov 2013 22:42:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/11/design-8-bit-logic-unit/</guid><description>In the last post I introduced the design for a 1-bit Logic Unit. This post covers the design effort to cram 8 of these on to a single pad board complete with connectors, status LEDs and gating relays thereby forming a complete 8-bit Logic Unit.
Sticking with the same diagram style I introduced in the last post here is what 8 of the 1-bit Logic Units look like all crammed on to the 55 x 40 hole pad board (excluding wire links):</description></item><item><title>ALU Design: 1-bit Logic Unit</title><link>https://relaycomputer.co.uk/posts/2013/11/design-1-bit-logic-unit/</link><pubDate>Mon, 11 Nov 2013 23:32:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/11/design-1-bit-logic-unit/</guid><description>This post covers the design of a 1-bit Logic Unit that can produce AND, OR, XOR, NOT and SHL (Shift Left) outputs from two input bits B and C. Here’s a schematic of the 1-bit Logic Unit (based directly on the one used in the Harry Porter Relay Computer):
The diagram shows two 4PDT (4 pole double toggle) relays with the coils of each shown as a striped box at the top. The four double toggle switches are also shown on each relay and the current position of each switch is as when the relay is off. When power is applied to the relay coil all four switches change over simultaneously. The two relays together with all the various connections form the 1-bit Logic Unit. Inputs to the unit are shown with ‘cupped’ line ends: B and C are the two 1-bit inputs; V is a permanent connection to the power supply. Outputs from the unit are shown with an arrowed line end: the outputs AND, OR, XOR, NOT and SHL. Wire joins are shown with a dot (otherwise the wire is passing over but not connecting to another wire) and unused switches on a relay are shown in grey.</description></item><item><title>Architectural breakdown: the ALU</title><link>https://relaycomputer.co.uk/posts/2013/11/architectural-breakdown-alu/</link><pubDate>Thu, 07 Nov 2013 07:24:00 +0000</pubDate><guid>https://relaycomputer.co.uk/posts/2013/11/architectural-breakdown-alu/</guid><description>In this post I’ll continue to try and explain away the various bits of the architecture that will make up my relay computer project — this time it’s the Arithmetic Logic Unit (ALU). Here (yet again) is the architecture I’ll be building against (from the Harry Porter Relay Computer)
System Architecture for a Relay Computer[^1] The Arithmetic Logic Unit (ALU) sits at the very heart of the computer and without it you wouldn’t be able to do much at all … you could certainly move data back and forth between the memory and registers but that’d be about it. As you might have guessed from the name it allows the computer to perform arithmetic and logic functions. Some ALUs have a myriad of functionality available but this architecture takes a good balance between simplicity and functionality — the idea being that you can perform more complex functions by using a combination of simpler ones (subtraction can be performed by negating a number then adding it and multiplication can be performed by repeated adding). This does mean that the computer takes longer to do some things, like subtraction and multiplication, but it’s much simpler to construct as a result.</description></item></channel></rss>