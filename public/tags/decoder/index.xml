<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Decoder on Relay Computer</title>
    <link>https://relaycomputer.co.uk/tags/decoder/</link>
    <description>Recent content in Decoder on Relay Computer</description>
    <generator>Hugo</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 05 Jan 2020 03:03:00 +0000</lastBuildDate>
    <atom:link href="https://relaycomputer.co.uk/tags/decoder/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Decoder Construction</title>
      <link>https://relaycomputer.co.uk/posts/2020/01/decoder-construction/</link>
      <pubDate>Sun, 05 Jan 2020 03:03:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2020/01/decoder-construction/</guid>
      <description>In my last post I covered off the full design for the decoder card so all that remains is to get it soldered up and tested. As before I’ve put a video together which covers the highlights:
As you can see towards the end of the video that’s the basics of branching complete and finally my computer is capable of running more complicated programs that have loops and decision making points in them. As reaching this point has coincided nicely with the start of a new decade I’ll now pause construction for a moment whilst I create a series of ‘2020 update’ videos. In these videos I’ll cover off:</description>
    </item>
    <item>
      <title>Decoder Design: Schematic &amp; PCBs</title>
      <link>https://relaycomputer.co.uk/posts/2019/12/decoder-design-pcb/</link>
      <pubDate>Sun, 22 Dec 2019 03:03:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2019/12/decoder-design-pcb/</guid>
      <description>I’ve almost got everything I need now to get my relay computer to do branching. The hard work of designing and constructing the sequencer and controller units is complete and both units can perform a GOTO operation. The only problem now is the decoder card doesn’t understand what a GOTO instruction looks like and so can’t tell the controller unit to perform a GOTO. That’s easily fixed though as the decoder is one of the simplest cards in my computer.</description>
    </item>
    <item>
      <title>Decoder Construction: MOV-8, ALU &amp; SETAB</title>
      <link>https://relaycomputer.co.uk/posts/2015/06/decoder-construction-mov-8-alu-setab/</link>
      <pubDate>Sun, 07 Jun 2015 21:43:00 +0100</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2015/06/decoder-construction-mov-8-alu-setab/</guid>
      <description>In a change from prior form I’m combining the construction and testing of the next card in to a single post this time. Partly because this card is a nice easy one but also because it’s the first card that I’ll be partially constructing to begin with and then I’ll return to it later to add further functionality.
The card in question is the decoder which will take the value on the instruction bus and use it to decide which instruction class it represents. This class will then be used by the upcoming control card along with the sequencer pulses to operate the various control lines of the computer in the appropriate order. To begin with the decoder will recognise MOV8, ALU and SETAB instruction classes but there’ll be more added later on.</description>
    </item>
    <item>
      <title>Decoder Design: MOV-8, ALU &amp; SETAB </title>
      <link>https://relaycomputer.co.uk/posts/2015/01/decoder-design-mov-8-alu-setab/</link>
      <pubDate>Sun, 04 Jan 2015 22:12:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2015/01/decoder-design-mov-8-alu-setab/</guid>
      <description>In my last post I introduced the design for the instruction register which holds the current 8-bit opcode that the computer is executing. The next card to design is the decoder which will take the 8-bit opcode and set either the MOV-8, ALU or SETAB control lines depending which class of instruction the opcode represents. This is actually quite straightforward and just needs a few relays to handle the logic.</description>
    </item>
  </channel>
</rss>
