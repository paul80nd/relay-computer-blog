<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on Relay Computer</title>
    <link>https://relaycomputer.co.uk/tags/coding/</link>
    <description>Recent content in Coding on Relay Computer</description>
    <generator>Hugo</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 27 Nov 2022 10:00:00 +0000</lastBuildDate>
    <atom:link href="https://relaycomputer.co.uk/tags/coding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Assembling an assembler - token scanning</title>
      <link>https://relaycomputer.co.uk/posts/2022/11/assembly-part-2/</link>
      <pubDate>Sun, 27 Nov 2022 10:00:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2022/11/assembly-part-2/</guid>
      <description>In the last episode of this mini-series I explained about how an assembler’s job is effectively to convert a program written in a language a human programmer can understand (assembly language in this case) into something which a computer can understand. So as an example, the assembler will take something like this …
start: ldi a,1 ; initial setup A = 1 ldi b,0 ; B = 0 loop: mov c,b ; slide B -&gt; C mov b,a ; A -&gt; B add ; and add together done: bcs done ; infinite loop if overflowed jmp loop ; otherwise have another go … and turn it in to something like this …</description>
    </item>
    <item>
      <title>Assembling an assembler - overview</title>
      <link>https://relaycomputer.co.uk/posts/2022/05/assembly-part-1/</link>
      <pubDate>Sat, 14 May 2022 11:00:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2022/05/assembly-part-1/</guid>
      <description>To make my relay computer do something interesting (or anything at all) it needs a list of instructions held in memory. Each instruction consists of an 8-bit value called an opcode (portmanteau of operation and code) optionally followed by one or two further 8-bit values (usually referencing a location in memory). The computer will work through them one at a time doing whatever operation that opcode represents. Here’s an example program:</description>
    </item>
    <item>
      <title>Yet another diversion</title>
      <link>https://relaycomputer.co.uk/posts/2016/07/yet-another-diversion/</link>
      <pubDate>Sun, 24 Jul 2016 22:13:00 +0100</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2016/07/yet-another-diversion/</guid>
      <description>It’s been a bit quiet on the relay computer front again for a while … well it is summer after all and there’s no point staying inside the house tending to my hobbies when I can be running around outside getting sunburnt. Of course though, this is the UK and summer consists mostly of rain (as do most of the other seasons here) so what other excuse do I have for not posting in ages?</description>
    </item>
    <item>
      <title>Instruction Set</title>
      <link>https://relaycomputer.co.uk/posts/2013/11/instruction-set/</link>
      <pubDate>Thu, 07 Nov 2013 23:47:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2013/11/instruction-set/</guid>
      <description>In the last post I promised to reveal the planned instruction set for the computer and here it is (pdf file).
This should be viewed alongside the architecture diagram which can be found in my previous architecture posts … and to be fair if you’ve been following along through my recent posts then just close your eyes … you’ll probably find it’s been burnt on to your eye balls given the amount of times I’ve posted it ;)</description>
    </item>
  </channel>
</rss>
