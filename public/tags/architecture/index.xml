<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>architecture on Relay Computer</title>
    <link>https://relaycomputer.co.uk/tags/architecture/</link>
    <description>Recent content in architecture on Relay Computer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 24 Jul 2016 22:13:00 +0100</lastBuildDate><atom:link href="https://relaycomputer.co.uk/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Yet another diversion</title>
      <link>https://relaycomputer.co.uk/2016/07/yet-another-diversion/</link>
      <pubDate>Sun, 24 Jul 2016 22:13:00 +0100</pubDate>
      
      <guid>https://relaycomputer.co.uk/2016/07/yet-another-diversion/</guid>
      <description>It&amp;rsquo;s been a bit quiet on the relay computer front again for a while &amp;hellip; well it is summer after all and there&amp;rsquo;s no point staying inside the house tending to my hobbies when I can be running around outside getting sunburnt. Of course though, this is the UK and summer consists mostly of rain (as do most of the other seasons here) so what other excuse do I have for not posting in ages?</description>
    </item>
    
    <item>
      <title>Instruction Set</title>
      <link>https://relaycomputer.co.uk/2013/11/instruction-set/</link>
      <pubDate>Thu, 07 Nov 2013 23:47:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2013/11/instruction-set/</guid>
      <description>In the last post I promised to reveal the planned instruction set for the computer and here it is (pdf file).
This should be viewed alongside the architecture diagram which can be found in my previous architecture posts &amp;hellip; and to be fair if you&amp;rsquo;ve been following along through my recent posts then just close your eyes &amp;hellip; you&amp;rsquo;ll probably find it&amp;rsquo;s been burnt on to your eye balls given the amount of times I&amp;rsquo;ve posted it ;)</description>
    </item>
    
    <item>
      <title>Architectural breakdown: Programming and Control 2</title>
      <link>https://relaycomputer.co.uk/2013/11/architectural-breakdown-programming-and_7/</link>
      <pubDate>Thu, 07 Nov 2013 23:22:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2013/11/architectural-breakdown-programming-and_7/</guid>
      <description>So, the last post didn&amp;rsquo;t quite wrap up this &amp;lsquo;mini-series&amp;rsquo; but hopefully this one will. Continuing on with how the Programming and Control of the computer happens here again, for the last time (really last time), is the architecture I&amp;rsquo;ll be building against (from the Harry Porter Relay Computer)
 System Architecture for a Relay Computer[^1]  In the last post I covered an example of the steps required to subtract 6 from 10 (with 6 placed in register B and 10 in register C beforehand) and also that each step is represented by an opcode which is placed in the Instruction register so the computer can work out the sequence of actions to take to perform the step.</description>
    </item>
    
    <item>
      <title>Architectural breakdown: Programming and Control</title>
      <link>https://relaycomputer.co.uk/2013/11/architectural-breakdown-programming-and/</link>
      <pubDate>Thu, 07 Nov 2013 21:54:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2013/11/architectural-breakdown-programming-and/</guid>
      <description>In this post I&amp;rsquo;ll wrap up this &amp;lsquo;mini-series&amp;rsquo; of trying to explain away the various bits of the architecture that will make up my relay computer project — finally now we come on to Programming and Control of the computer. Here again, for the last time, is the architecture I&amp;rsquo;ll be building against (from the Harry Porter Relay Computer)
 System Architecture for a Relay Computer[^1]  With all the various parts of the architecture I&amp;rsquo;ve discussed so far — the busses, registers, memory and ALU — we have a computer that could be manually operated, albeit laboriously, to perform various tasks.</description>
    </item>
    
    <item>
      <title>Architectural breakdown: the ALU</title>
      <link>https://relaycomputer.co.uk/2013/11/architectural-breakdown-alu/</link>
      <pubDate>Thu, 07 Nov 2013 07:24:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2013/11/architectural-breakdown-alu/</guid>
      <description>In this post I&amp;rsquo;ll continue to try and explain away the various bits of the architecture that will make up my relay computer project — this time it&amp;rsquo;s the Arithmetic Logic Unit (ALU). Here (yet again) is the architecture I&amp;rsquo;ll be building against (from the Harry Porter Relay Computer)
 System Architecture for a Relay Computer[^1]  The Arithmetic Logic Unit (ALU) sits at the very heart of the computer and without it you wouldn&amp;rsquo;t be able to do much at all &amp;hellip; you could certainly move data back and forth between the memory and registers but that&amp;rsquo;d be about it.</description>
    </item>
    
    <item>
      <title>Architectural breakdown: Memory</title>
      <link>https://relaycomputer.co.uk/2013/11/architectural-breakdown-memory/</link>
      <pubDate>Wed, 06 Nov 2013 20:14:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2013/11/architectural-breakdown-memory/</guid>
      <description>In this post I&amp;rsquo;ll continue to try and explain away the various bits of the architecture that will make up my relay computer project — this time it&amp;rsquo;s the memory. Here again is the architecture I&amp;rsquo;ll be building against (from the Harry Porter Relay Computer)
 System Architecture for a Relay Computer[^1]  In my last post I wrote about the computer registers, each of which can store a binary value — they&amp;rsquo;re typically very fast although there&amp;rsquo;s a fixed number of them (in this computer there&amp;rsquo;s eight &amp;lsquo;general registers&amp;rsquo; A, B, C, D, M1, M2, X and Y).</description>
    </item>
    
    <item>
      <title>Architectural breakdown: Buses and Registers</title>
      <link>https://relaycomputer.co.uk/2013/11/architectural-breakdown-buses-and/</link>
      <pubDate>Tue, 05 Nov 2013 19:07:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2013/11/architectural-breakdown-buses-and/</guid>
      <description>In this post I&amp;rsquo;ll continue to try and explain away the various bits of the architecture that will make up my relay computer project — this time it&amp;rsquo;s buses and registers. Here again is the architecture I&amp;rsquo;ll be building against (from the Harry Porter Relay Computer):
 System Architecture for a Relay Computer[^1]  Buses are simply a set of wires that connect up the various parts of a computer. As each wire can carry 1 bit it therefore takes 8 wires to carry 8 bits.</description>
    </item>
    
    <item>
      <title>Architectural breakdown: Binary</title>
      <link>https://relaycomputer.co.uk/2013/11/architectural-breakdown-binary/</link>
      <pubDate>Mon, 04 Nov 2013 10:35:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2013/11/architectural-breakdown-binary/</guid>
      <description>&amp;hellip; and it all begins with binary. Binary is a &amp;lsquo;base 2&amp;rsquo; numbering system which means it uses the numbers 0 and 1. In contrast humans tend to use decimal (base 10) for their day-to-day numerical needs which, of course, uses the numbers 0 to 9. Binary is particularly suitable for electronics as the numbers 0 and 1 can be represented by a circuit being on (1) or off (0), or more relevantly to this computer, a wire may be carrying power (1) or not (0).</description>
    </item>
    
    <item>
      <title>Architecture isn&#39;t just for houses</title>
      <link>https://relaycomputer.co.uk/2013/11/architecture-isnt-just-for-houses/</link>
      <pubDate>Mon, 04 Nov 2013 08:51:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2013/11/architecture-isnt-just-for-houses/</guid>
      <description>So, with the scene now set (see previous posts) let&amp;rsquo;s dive right in and take a look at the system architecture I&amp;rsquo;ll be building my computer upon &amp;hellip; here it is &amp;hellip;
 System Architecture for a Relay Computer[^1]  This is a direct copy of the architecture Dr Harry Porter designed when creating his own relay computer. The architecture has the following features:
 8-bit data bus 16-bit address bus 8 x 8-bit general purpose registers (A, B, C, D, M1, M2, X, Y)  Registers M1 and M2 combine to make a read only 16-bit register Registers X and Y combine to make a general purpose 16-bit register   8-bit Arithmetic Logic Unit with 3 condition registers (Zero, Carry and Sign) 16-bit jump register (J) 8-bit instruction register 16-bit program counter (PC) with increment unit 32K x 8-bit SRAM  I personally think this design has a really good balance of functionality vs complexity.</description>
    </item>
    
  </channel>
</rss>
