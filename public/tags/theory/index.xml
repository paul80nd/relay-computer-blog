<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Theory on Relay Computer</title>
    <link>https://relaycomputer.co.uk/tags/theory/</link>
    <description>Recent content in Theory on Relay Computer</description>
    <generator>Hugo</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 06 Oct 2019 01:00:00 +0000</lastBuildDate>
    <atom:link href="https://relaycomputer.co.uk/tags/theory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Branching: Opcode Timing</title>
      <link>https://relaycomputer.co.uk/posts/2019/10/branching-opcode-timing/</link>
      <pubDate>Sun, 06 Oct 2019 01:00:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2019/10/branching-opcode-timing/</guid>
      <description>In my last post I covered the design for the GOTO opcode which will enable my relay computer to perform branching, loops and so on. Here’s where I got to last time:
Branch/Call &amp; 16-bit Load Immediate GOTO 24 1 1 d s c z n x h h h h h h h h l l l l l l l l d = destination register (0-M, 1-J)
s = 1 = load PC if sign bit is set (if negative); 0 = ignore sign bit
c = 1 = load PC if carry bit is set (if carry); 0 = ignore carry bit
z = 1 = load PC if zero bit set (if result is zero); 0 = ignore if zero bit set
n = 1 = load PC if zero bit clear (if result is not zero); 0 = ignore if zero bit clear
x = 1 = copy PC to XY; 0 = no copy
hhhhhhhh = address high byte (to set in M2/J2)
llllllll = address low byte (to set in M1/J1) The opcode can also be drawn in diagram form as follows:</description>
    </item>
    <item>
      <title>Branching: Opcode Design</title>
      <link>https://relaycomputer.co.uk/posts/2019/09/branching-opcode-design/</link>
      <pubDate>Mon, 23 Sep 2019 01:00:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2019/09/branching-opcode-design/</guid>
      <description>There’s been a common theme recently in the comments on my YouTube videos … people are ready to see my relay computer gain the power of branching and become a ‘proper’ computer … and that’s fair enough because that’s the point where the computer can do way more interesting things and run more complicated programs. Originally I was going to add new instructions to the computer in order of complexity but I don’t want to keep you (or I) waiting for the ‘main event’ any longer so it’s time to start designing the most complicated of all instruction classes … the ‘GOTO’.</description>
    </item>
    <item>
      <title>The problem with memory</title>
      <link>https://relaycomputer.co.uk/posts/2017/08/the-problem-with-memory/</link>
      <pubDate>Fri, 18 Aug 2017 22:58:00 +0100</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2017/08/the-problem-with-memory/</guid>
      <description>It’s time, at last, to start looking at the design for the computer’s memory and this is a bit of a game changer as it’s the final part of the jigsaw that lets the computer run a program. However, it’s also the part of the computer that leaves me in a bit of a quandary.
The problem with memory is that typically you need quite a lot of it and that’s something that doesn’t come easy with relays. In a way the registers already present in the computer are a kind of memory … they store a single byte of data. So, effectively you can get two bytes worth of storage on one of the usual computer cards. You can maybe see where this is going.</description>
    </item>
    <item>
      <title>Sequencing &amp; Control Design: Overview</title>
      <link>https://relaycomputer.co.uk/posts/2014/09/sequencing-control-design-overview/</link>
      <pubDate>Fri, 19 Sep 2014 23:27:00 +0100</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2014/09/sequencing-control-design-overview/</guid>
      <description>I’ve now got my computer to a state where I can perform ALU operations and push values around the four registers by manually operating the various control lines. It’s time to move things on a bit now and work towards getting the computer to the point where given a specific instruction/op-code it can operate the control lines itself without further input from the user. Eventually the computer will be given a list of instructions to perform which it’ll work through step by step but for now the next milestone is to automate the operation of a single instruction.</description>
    </item>
    <item>
      <title>Architectural breakdown: Programming and Control 2</title>
      <link>https://relaycomputer.co.uk/posts/2013/11/architectural-breakdown-programming-and_7/</link>
      <pubDate>Thu, 07 Nov 2013 23:22:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2013/11/architectural-breakdown-programming-and_7/</guid>
      <description>So, the last post didn’t quite wrap up this ‘mini-series’ but hopefully this one will. Continuing on with how the Programming and Control of the computer happens here again, for the last time (really last time), is the architecture I’ll be building against (from the Harry Porter Relay Computer)
System Architecture for a Relay Computer[^1] In the last post I covered an example of the steps required to subtract 6 from 10 (with 6 placed in register B and 10 in register C beforehand) and also that each step is represented by an opcode which is placed in the Instruction register so the computer can work out the sequence of actions to take to perform the step. The collection of program steps are stored in the memory along with any data required and so a full program to subtract 6 from 10 would look as follows in memory:</description>
    </item>
    <item>
      <title>Architectural breakdown: Programming and Control</title>
      <link>https://relaycomputer.co.uk/posts/2013/11/architectural-breakdown-programming-and/</link>
      <pubDate>Thu, 07 Nov 2013 21:54:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2013/11/architectural-breakdown-programming-and/</guid>
      <description>In this post I’ll wrap up this ‘mini-series’ of trying to explain away the various bits of the architecture that will make up my relay computer project — finally now we come on to Programming and Control of the computer. Here again, for the last time, is the architecture I’ll be building against (from the Harry Porter Relay Computer)
System Architecture for a Relay Computer[^1] With all the various parts of the architecture I’ve discussed so far — the busses, registers, memory and ALU — we have a computer that could be manually operated, albeit laboriously, to perform various tasks. Actually, in fact, this will be the first milestone in the construction of my computer … that I can manually operate what I have built so far just as the computer will itself when it is able to execute programs. Just to give you a feel for exactly how labour intensive even a simple task would be here are the manual steps to subtract 6 from 10:</description>
    </item>
    <item>
      <title>Architectural breakdown: the ALU</title>
      <link>https://relaycomputer.co.uk/posts/2013/11/architectural-breakdown-alu/</link>
      <pubDate>Thu, 07 Nov 2013 07:24:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2013/11/architectural-breakdown-alu/</guid>
      <description>In this post I’ll continue to try and explain away the various bits of the architecture that will make up my relay computer project — this time it’s the Arithmetic Logic Unit (ALU). Here (yet again) is the architecture I’ll be building against (from the Harry Porter Relay Computer)
System Architecture for a Relay Computer[^1] The Arithmetic Logic Unit (ALU) sits at the very heart of the computer and without it you wouldn’t be able to do much at all … you could certainly move data back and forth between the memory and registers but that’d be about it. As you might have guessed from the name it allows the computer to perform arithmetic and logic functions. Some ALUs have a myriad of functionality available but this architecture takes a good balance between simplicity and functionality — the idea being that you can perform more complex functions by using a combination of simpler ones (subtraction can be performed by negating a number then adding it and multiplication can be performed by repeated adding). This does mean that the computer takes longer to do some things, like subtraction and multiplication, but it’s much simpler to construct as a result.</description>
    </item>
    <item>
      <title>Architectural breakdown: Memory</title>
      <link>https://relaycomputer.co.uk/posts/2013/11/architectural-breakdown-memory/</link>
      <pubDate>Wed, 06 Nov 2013 20:14:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2013/11/architectural-breakdown-memory/</guid>
      <description>In this post I’ll continue to try and explain away the various bits of the architecture that will make up my relay computer project — this time it’s the memory. Here again is the architecture I’ll be building against (from the Harry Porter Relay Computer)
System Architecture for a Relay Computer[^1] In my last post I wrote about the computer registers, each of which can store a binary value — they’re typically very fast although there’s a fixed number of them (in this computer there’s eight ‘general registers’ A, B, C, D, M1, M2, X and Y). Needless to say we wouldn’t be able to do anything too exciting if we’re limited to only 8 storage slots and that’s where the memory comes in — it’s not as fast (relatively) as the registers but it can hold many, many more values.</description>
    </item>
    <item>
      <title>Architectural breakdown: Buses and Registers</title>
      <link>https://relaycomputer.co.uk/posts/2013/11/architectural-breakdown-buses-and/</link>
      <pubDate>Tue, 05 Nov 2013 19:07:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2013/11/architectural-breakdown-buses-and/</guid>
      <description>In this post I’ll continue to try and explain away the various bits of the architecture that will make up my relay computer project — this time it’s buses and registers. Here again is the architecture I’ll be building against (from the Harry Porter Relay Computer):
System Architecture for a Relay Computer[^1] Buses are simply a set of wires that connect up the various parts of a computer. As each wire can carry 1 bit it therefore takes 8 wires to carry 8 bits. In this architecture the data bus is 8 bits wide and the address bus (which I’ll go in to further in the next post on the memory) is 16 bits wide. You can only have a single value on a bus at the same time so any part of the computer that needs to talk to another part has to wait its turn for the bus to become free. It’s worth noting though that because the data and address bus are physically separate you can have different values on each without problem. In the diagram above the data bus is shown as a thick line on the left and the address bus is the thick line on the right. In real life, of course, there would be as many wires as there are bits but to simplify the diagram they’re shown as a single thick line.</description>
    </item>
    <item>
      <title>Architectural breakdown: Binary</title>
      <link>https://relaycomputer.co.uk/posts/2013/11/architectural-breakdown-binary/</link>
      <pubDate>Mon, 04 Nov 2013 10:35:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2013/11/architectural-breakdown-binary/</guid>
      <description>… and it all begins with binary. Binary is a ‘base 2’ numbering system which means it uses the numbers 0 and 1. In contrast humans tend to use decimal (base 10) for their day-to-day numerical needs which, of course, uses the numbers 0 to 9. Binary is particularly suitable for electronics as the numbers 0 and 1 can be represented by a circuit being on (1) or off (0), or more relevantly to this computer, a wire may be carrying power (1) or not (0). If you wanted to be able to carry a single decimal digit (0-9) on a wire you’d need to pull some fancy tricks - perhaps have a different level of power signifying the different digits or send pulses counting up the number. All this gets very complicated though - binary keeps it nice and simple.</description>
    </item>
  </channel>
</rss>
