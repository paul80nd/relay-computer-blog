<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>control on Relay Computer</title>
    <link>https://relaycomputer.co.uk/tags/control.html</link>
    <description>Recent content in control on Relay Computer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sat, 21 Dec 2019 03:03:00 +0000</lastBuildDate><atom:link href="https://relaycomputer.co.uk/tags/control/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Controller Construction</title>
      <link>https://relaycomputer.co.uk/2019/12/controller-construction.html</link>
      <pubDate>Sat, 21 Dec 2019 03:03:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2019/12/controller-construction.html</guid>
      <description>In my last couple of posts I covered off the full design for the controller unit. As the PCBs have now arrived I can get on with soldering up the cards and giving them a test.</description>
    </item>
    
    <item>
      <title>Controller Design: Schematic &amp; PCBs</title>
      <link>https://relaycomputer.co.uk/2019/12/controller-design-pcb.html</link>
      <pubDate>Fri, 20 Dec 2019 03:03:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2019/12/controller-design-pcb.html</guid>
      <description>In my last couple of posts I finalised the controller schematic designs for the ALU, SETAB, MOV8 and GOTO class of instructions. Now it&amp;rsquo;s time to bring all those schematics together and design the two controller PCBs.</description>
    </item>
    
    <item>
      <title>Controller Design: ALU, MOV8 &amp; SETAB Instructions</title>
      <link>https://relaycomputer.co.uk/2019/12/controller-alu-mov8-setab-design.html</link>
      <pubDate>Sat, 07 Dec 2019 03:03:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2019/12/controller-alu-mov8-setab-design.html</guid>
      <description>In my last post I covered off the controller design for the GOTO instruction. Being as I&amp;rsquo;ve decided to implement the controller on a new set of PCB cards I need to transfer over the existing ALU, MOV8 &amp;amp; SETAB instructions to the new controller design.</description>
    </item>
    
    <item>
      <title>Controller Design: GOTO Instruction</title>
      <link>https://relaycomputer.co.uk/2019/11/controller-goto-design.html</link>
      <pubDate>Sat, 30 Nov 2019 03:03:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2019/11/controller-goto-design.html</guid>
      <description>With the sequencer now designed and constructed I&amp;rsquo;m much closer to getting branching working on my relay computer. The next hurdle is updating the controller cards so that they can fire the appropriate control lines at the right time as directed by the sequencer pulses.</description>
    </item>
    
    <item>
      <title>Branching: Opcode Timing</title>
      <link>https://relaycomputer.co.uk/2019/10/branching-opcode-timing.html</link>
      <pubDate>Sun, 06 Oct 2019 01:00:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2019/10/branching-opcode-timing.html</guid>
      <description>In my last post I covered the design for the GOTO opcode which will enable my relay computer to perform branching, loops and so on. Here&amp;rsquo;s where I got to last time:</description>
    </item>
    
    <item>
      <title>Branching: Opcode Design</title>
      <link>https://relaycomputer.co.uk/2019/09/branching-opcode-design.html</link>
      <pubDate>Mon, 23 Sep 2019 01:00:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2019/09/branching-opcode-design.html</guid>
      <description>There&amp;rsquo;s been a common theme recently in the comments on my YouTube videos &amp;hellip; people are ready to see my relay computer gain the power of branching and become a &amp;lsquo;proper&amp;rsquo; computer &amp;hellip; and that&amp;rsquo;s fair enough because that&amp;rsquo;s the point where the computer can do way more interesting things and run more complicated programs.</description>
    </item>
    
    <item>
      <title>Auxiliary Control Construction</title>
      <link>https://relaycomputer.co.uk/2018/03/auxiliary-control-construction.html</link>
      <pubDate>Tue, 27 Mar 2018 22:07:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2018/03/auxiliary-control-construction.html</guid>
      <description>In my last three posts I covered the design of the auxiliary control unit which will ease entering and inspecting programs in the computer’s memory. With the design ‘in the bag’ it’s time to get constructing although this time we’re not starting with a blank card …</description>
    </item>
    
    <item>
      <title>Auxiliary Control Design (Part 3 of 3)</title>
      <link>https://relaycomputer.co.uk/2018/02/auxiliary-control-design-part-3-of-3.html</link>
      <pubDate>Wed, 07 Feb 2018 22:07:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2018/02/auxiliary-control-design-part-3-of-3.html</guid>
      <description>This is the last post in a mini-series of three covering the design of the auxiliary control unit which will ease entering and inspecting programs in the computer&amp;rsquo;s memory.</description>
    </item>
    
    <item>
      <title>Auxiliary Control Design (Part 2 of 3)</title>
      <link>https://relaycomputer.co.uk/2018/01/auxiliary-control-design-part-2-of-3.html</link>
      <pubDate>Mon, 29 Jan 2018 22:12:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2018/01/auxiliary-control-design-part-2-of-3.html</guid>
      <description>In my last post I made a start on the auxiliary control design which once completed will make it much easier to load instructions in to memory - effectively it&amp;rsquo;s a computer within a computer.</description>
    </item>
    
    <item>
      <title>Auxiliary Control Design (Part 1 of 3)</title>
      <link>https://relaycomputer.co.uk/2018/01/auxiliary-control-design-part-1-of-3.html</link>
      <pubDate>Wed, 24 Jan 2018 21:24:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2018/01/auxiliary-control-design-part-1-of-3.html</guid>
      <description>My relay computer is now at the point where it can execute a program in memory without assistance. In order to do that though, of course, the program needs to be loaded into memory in the first place and at the moment that&amp;rsquo;s a bit of a pain.</description>
    </item>
    
    <item>
      <title>Fetch and Increment - Construction and Test</title>
      <link>https://relaycomputer.co.uk/2018/01/fetch-and-increment-construction-and.html</link>
      <pubDate>Tue, 16 Jan 2018 22:16:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2018/01/fetch-and-increment-construction-and.html</guid>
      <description>This is a bit of a landmark moment &amp;hellip; at least for the construction of my relay computer. For a long time now my blog posts have been leading up to the point where my computer will execute a program in memory without any further input from the user.</description>
    </item>
    
    <item>
      <title>Control Design: Fetch and Increment</title>
      <link>https://relaycomputer.co.uk/2017/09/control-design-fetch-and-increment.html</link>
      <pubDate>Sun, 17 Sep 2017 12:57:00 +0100</pubDate>
      
      <guid>https://relaycomputer.co.uk/2017/09/control-design-fetch-and-increment.html</guid>
      <description>The design of the computer&amp;rsquo;s memory, incrementer and program counter are now complete but there&amp;rsquo;s one last piece of the &amp;lsquo;puzzle&amp;rsquo; required to get the computer running a program.</description>
    </item>
    
    <item>
      <title>Controller Construction: MOV-8, ALU and SETAB</title>
      <link>https://relaycomputer.co.uk/2016/01/controller-construction-mov-8-alu-and.html</link>
      <pubDate>Fri, 01 Jan 2016 23:23:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/2016/01/controller-construction-mov-8-alu-and.html</guid>
      <description>So yea, it&amp;rsquo;s been a while since my last post &amp;hellip; in fact it&amp;rsquo;s been just over six months. For some reason I decided I didn&amp;rsquo;t have enough to do in the evenings so had a crack at becoming an actuary.</description>
    </item>
    
    <item>
      <title>Control Design: MOV-8, ALU and SETAB (part 2 of 2)</title>
      <link>https://relaycomputer.co.uk/2015/04/control-design-mov-8-alu-and-setab-part.html</link>
      <pubDate>Sat, 04 Apr 2015 08:06:00 +0100</pubDate>
      
      <guid>https://relaycomputer.co.uk/2015/04/control-design-mov-8-alu-and-setab-part.html</guid>
      <description>In part one of this two part post I introduced the design of the control relays for each of the MOV-8, ALU and SETAB instructions. With these in hand I can now move on to placing these on the control cards and wire everything together.</description>
    </item>
    
    <item>
      <title>Control Design: MOV-8, ALU and SETAB (part 1 of 2)</title>
      <link>https://relaycomputer.co.uk/2015/03/control-design-mov-8-alu-and-setab-part.html</link>
      <pubDate>Tue, 31 Mar 2015 22:26:00 +0100</pubDate>
      
      <guid>https://relaycomputer.co.uk/2015/03/control-design-mov-8-alu-and-setab-part.html</guid>
      <description>Over the last five posts I&amp;rsquo;ve been building up the design of a set of cards so that the computer will be able to understand and perform the MOV-8, ALU and SETAB instructions.</description>
    </item>
    
    <item>
      <title>Sequencing &amp; Control Design: Overview</title>
      <link>https://relaycomputer.co.uk/2014/09/sequencing-control-design-overview.html</link>
      <pubDate>Fri, 19 Sep 2014 23:27:00 +0100</pubDate>
      
      <guid>https://relaycomputer.co.uk/2014/09/sequencing-control-design-overview.html</guid>
      <description>I&amp;rsquo;ve now got my computer to a state where I can perform ALU operations and push values around the four registers by manually operating the various control lines.</description>
    </item>
    
  </channel>
</rss>
