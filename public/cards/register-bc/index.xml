<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Register B/C on Relay Computer</title>
    <link>https://relaycomputer.co.uk/cards/register-bc/</link>
    <description>Recent content in Register B/C on Relay Computer</description>
    <generator>Hugo</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 26 May 2014 09:59:00 +0100</lastBuildDate>
    <atom:link href="https://relaycomputer.co.uk/cards/register-bc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Register Construction: Completed B and C 8-bit Registers Full Test</title>
      <link>https://relaycomputer.co.uk/posts/2014/05/register-construction-completed-b-and-c/</link>
      <pubDate>Mon, 26 May 2014 09:59:00 +0100</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2014/05/register-construction-completed-b-and-c/</guid>
      <description>The B/C Register card is now complete and looks like this:
As usual I’ve put a video together which demonstrates this card in operation … firstly on its own but then together with all the other cards constructed so far. Hopefully these videos are ‘adding value’ and are worthwhile (they really do take ages to put together … this one took about 5 hours effort in total for 20 mins of video). Please do leave any comments, good or bad, either here on the blog or on YouTube against the video or feel free to ask any questions about the computer as although I know this is a pretty niche subject I can’t help feeling I’m talking to myself ;)</description>
    </item>
    <item>
      <title>Register Construction: B and C 8-bit Registers</title>
      <link>https://relaycomputer.co.uk/posts/2014/05/register-construction-b-and-c-8-bit/</link>
      <pubDate>Sat, 24 May 2014 17:23:00 +0100</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2014/05/register-construction-b-and-c-8-bit/</guid>
      <description>As mentioned in my last post I decided this time around not to post after each stage of card construction (being as the construction steps are now pretty similar to those for previous cards). In line with that decision this post covers all the steps taken to construct the B/C register card … primarily in photos and then with extra text where anything odd or different came up compared with the other cards completed so far.</description>
    </item>
    <item>
      <title>Register Design: B and C 8-bit Registers</title>
      <link>https://relaycomputer.co.uk/posts/2014/05/register-design-b-and-c-8-bit-registers/</link>
      <pubDate>Sun, 11 May 2014 10:08:00 +0100</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2014/05/register-design-b-and-c-8-bit-registers/</guid>
      <description>In a recent post I put up the design for the A and D 8-bit register card … the B and C register card is very similar in design but has the additional complexity that it has to directly feed the ALU. In another recent post I covered how to take multiple outputs from a relay without risking back-feed by utilising diodes in the output line. This post therefore brings together those two designs and although it’s essentially a re-hashing of the AD card post but with extra bits I’ll go through the design as I did with the AD card so that this post stands alone as it were.</description>
    </item>
    <item>
      <title>Register Design: Dual Output 8-bit Register</title>
      <link>https://relaycomputer.co.uk/posts/2014/04/register-design-dual-output-8-bit/</link>
      <pubDate>Thu, 24 Apr 2014 22:56:00 +0100</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2014/04/register-design-dual-output-8-bit/</guid>
      <description>In the last post I introduced the design for the A/D register card (which as its name suggests contains the A and D 8-bit registers). I’m now making a start on the design for the B/C register card and although its pretty much the same as the A/D card there’s an extra complexity because the B/C registers additionally feed the ALU B and C inputs.
For the A and D registers I ended up with the following circuit per 8-bit register:</description>
    </item>
    <item>
      <title>Register Design: General Purpose 8-bit Register</title>
      <link>https://relaycomputer.co.uk/posts/2014/04/register-design-general-purpose-8-bit/</link>
      <pubDate>Wed, 16 Apr 2014 22:08:00 +0100</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2014/04/register-design-general-purpose-8-bit/</guid>
      <description>This post covers the design of a general purpose 8-bit register that can be loaded from the data bus and then selected back to the data bus at a later time. This permits temporary storage of 8-bit values whilst performing various operations, for example, ALU functions. This post goes back over some of the ground already covered by the design of the condition registers which are a slightly simplified version of the registers detailed here.</description>
    </item>
  </channel>
</rss>
