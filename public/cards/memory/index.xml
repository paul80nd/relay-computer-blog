<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>memory on Relay Computer</title>
    <link>https://relaycomputer.co.uk/cards/memory/</link>
    <description>Recent content in memory on Relay Computer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 30 Nov 2017 21:15:00 +0000</lastBuildDate><atom:link href="https://relaycomputer.co.uk/cards/memory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Memory Test</title>
      <link>https://relaycomputer.co.uk/posts/2017/11/memory-test/</link>
      <pubDate>Thu, 30 Nov 2017 21:15:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/posts/2017/11/memory-test/</guid>
      <description>I&amp;rsquo;ve covered the construction of the upper and lower memory cards in my last two posts &amp;hellip; it&amp;rsquo;s now time to bring those two cards together to form the memory unit proper and give it all a test.
Here&amp;rsquo;s the upper card (in close up and at a rakish angle) &amp;hellip;
&amp;hellip; and here&amp;rsquo;s the lower memory card (at an equally rakish angle) &amp;hellip;
&amp;hellip; and when sandwiched together here&amp;rsquo;s how the memory unit as a whole looks:</description>
    </item>
    
    <item>
      <title>Memory Construction (Part 2 of 2)</title>
      <link>https://relaycomputer.co.uk/posts/2017/11/memory-construction-part-2-of-2/</link>
      <pubDate>Sat, 25 Nov 2017 16:52:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/posts/2017/11/memory-construction-part-2-of-2/</guid>
      <description>In my last post I made a start on the memory unit construction with the lower memory card. The lower card centres around the memory IC which runs at 5V. The upper memory card picks up the task of converting the data and address bus coming in from the rest of the computer (running at 12V) to the 5V needed by the memory IC.
The LEDs and backplane connectors were soldered down in my last post so we can jump straight to adding the card interconnects which pass the local address/data busses to the lower card:</description>
    </item>
    
    <item>
      <title>Memory Construction (Part 1 of 2)</title>
      <link>https://relaycomputer.co.uk/posts/2017/11/memory-construction-part-1-of-2/</link>
      <pubDate>Sun, 19 Nov 2017 14:53:00 +0000</pubDate>
      
      <guid>https://relaycomputer.co.uk/posts/2017/11/memory-construction-part-1-of-2/</guid>
      <description>It&amp;rsquo;s time to make a start on the construction of the memory unit and as mentioned in my last post this one is a bit more complex than &amp;lsquo;boring old registers&amp;rsquo; and so I&amp;rsquo;ll split it over two posts. Let&amp;rsquo;s dive in with the easy part - soldering down the LEDs and backplane connectors:
For the lower memory card there are 16 LEDs for the 16-bit address bus and 8 LEDs for the 8-bit data bus.</description>
    </item>
    
    <item>
      <title>Memory Design (Part 2 of 2)</title>
      <link>https://relaycomputer.co.uk/posts/2017/09/memory-design-part-2-of-2/</link>
      <pubDate>Wed, 06 Sep 2017 22:55:00 +0100</pubDate>
      
      <guid>https://relaycomputer.co.uk/posts/2017/09/memory-design-part-2-of-2/</guid>
      <description>In my last post I started the design for the computer&amp;rsquo;s memory unit which is spread over two cards. With the lower memory card design in place its now time to finish the job and design the upper card which will interface the rest of the computer with the memory chip of the lower card.
Let&amp;rsquo;s dive straight in by bringing up the board interconnects from the lower card:
Memory Card A with initial interconnects (larger) The left two columns bring up the address bus for the memory chip which needs to be at 5V for a logic 1 and at ground for a logic 0.</description>
    </item>
    
    <item>
      <title>Memory Design (Part 1 of 2)</title>
      <link>https://relaycomputer.co.uk/posts/2017/09/memory-design-part-1-of-2/</link>
      <pubDate>Sun, 03 Sep 2017 22:35:00 +0100</pubDate>
      
      <guid>https://relaycomputer.co.uk/posts/2017/09/memory-design-part-1-of-2/</guid>
      <description>In my last post I explained my decision to use a &amp;lsquo;modern&amp;rsquo; memory chip in my relay computer &amp;hellip; I also alluded to there being some complexities in interfacing the rest of the computer with that memory chip. The memory unit will be spread over two cards and in this post I cover the design of the first half and expand on those &amp;lsquo;complexities&amp;rsquo; a bit.
The memory chip I&amp;rsquo;m using is from the &amp;lsquo;62&amp;rsquo; family of CMOS 256Kbit (32K x 8) Static RAM &amp;hellip; effectively meaning it can store 32,768 separate 8 bit values referenced by a 15bit address bus.</description>
    </item>
    
    <item>
      <title>The problem with memory</title>
      <link>https://relaycomputer.co.uk/posts/2017/08/the-problem-with-memory/</link>
      <pubDate>Fri, 18 Aug 2017 22:58:00 +0100</pubDate>
      
      <guid>https://relaycomputer.co.uk/posts/2017/08/the-problem-with-memory/</guid>
      <description>It&amp;rsquo;s time, at last, to start looking at the design for the computer&amp;rsquo;s memory and this is a bit of a game changer as it&amp;rsquo;s the final part of the jigsaw that lets the computer run a program. However, it&amp;rsquo;s also the part of the computer that leaves me in a bit of a quandary.
The problem with memory is that typically you need quite a lot of it and that&amp;rsquo;s something that doesn&amp;rsquo;t come easy with relays.</description>
    </item>
    
  </channel>
</rss>
