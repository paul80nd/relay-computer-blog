<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Controller on Relay Computer</title>
    <link>https://relaycomputer.co.uk/cards/controller/</link>
    <description>Recent content in Controller on Relay Computer</description>
    <generator>Hugo</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 09 Mar 2025 06:00:00 +0000</lastBuildDate>
    <atom:link href="https://relaycomputer.co.uk/cards/controller/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Controller Design: LOAD, STORE &amp; INCXY Instructions</title>
      <link>https://relaycomputer.co.uk/posts/2025/03/controller-load-store-incxy-design/</link>
      <pubDate>Sun, 09 Mar 2025 06:00:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2025/03/controller-load-store-incxy-design/</guid>
      <description>For a while now my computer has been missing its final three instruction classes … and two of them are ‘up there’ alongside branching in terms of overall importance for the capability of my relay computer. The irony is, of course, that these instructions are already present on the controller PCB because you can’t ‘half design a PCB’ but to ‘play fair’ I’ve not soldered in the relays yet because I haven’t explained them yet in this blog … but that’s about to change.</description>
    </item>
    <item>
      <title>Controller Design: MOV8, MOV16 &amp; MISC Instructions</title>
      <link>https://relaycomputer.co.uk/posts/2022/12/controller-mov8-mov16-misc-design/</link>
      <pubDate>Mon, 05 Dec 2022 06:00:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2022/12/controller-mov8-mov16-misc-design/</guid>
      <description>Way back in 2019 I discussed how you can’t ‘half design a PCB’ and that, as a result, my controller cards already have all the required functionality laid down … I just haven’t explained how those ‘missing’ bits of functionality work in this blog yet.
To ensure I was ‘playing fair’ when constructing the controller I only soldered in the relays for the instructions I’d explained in this blog so far. Well, in my Relay Clock Series you may have noticed in the final episode I decided to solder the remaining relays in on the lower controller card meaning … the MOV8, MOV16 and MISC instruction classes are now complete and pretty much raring to go … which means I should probably get on with explaining them.</description>
    </item>
    <item>
      <title>Controller Construction</title>
      <link>https://relaycomputer.co.uk/posts/2019/12/controller-construction/</link>
      <pubDate>Sat, 21 Dec 2019 03:03:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2019/12/controller-construction/</guid>
      <description>In my last couple of posts I covered off the full design for the controller unit. As the PCBs have now arrived I can get on with soldering up the cards and giving them a test. As mentioned in my last post, although the controller supports all the instruction classes the computer will eventually use I’m only soldering up the ALU, GOTO, MOV8 and SETAB instructions for now.
Let’s start with the lower card and, as before, I’ve put together a video which covers the highlights:</description>
    </item>
    <item>
      <title>Controller Design: Schematic &amp; PCBs</title>
      <link>https://relaycomputer.co.uk/posts/2019/12/controller-design-pcb/</link>
      <pubDate>Fri, 20 Dec 2019 03:03:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2019/12/controller-design-pcb/</guid>
      <description>In my last couple of posts I finalised the controller schematic designs for the ALU, SETAB, MOV8 and GOTO class of instructions. Now it’s time to bring all those schematics together and design the two controller PCBs. As with the sequencer, the controller is spread over two interconnected cards and I’ll need to decide what’s going on the upper card and what will go on the lower card.
It’s also worth mentioning at this point that the schematics and PCB designs I’m about to share will have some instruction classes laid out that I haven’t covered yet in this blog. This is because you can’t ‘half design’ a PCB. I’ll cover these new instructions in more detail in the future but suffice to say that they’ll definitely be needed. In choosing what will go on which card I follow a similar rule to what I did on the sequencer and go by the number of relays required in each functional group. In the end I’ve gone for putting GOTO and MOV8/MOV16/MISC on the lower card and everything else on the upper card.</description>
    </item>
    <item>
      <title>Controller Design: ALU, MOV8 &amp; SETAB Instructions</title>
      <link>https://relaycomputer.co.uk/posts/2019/12/controller-alu-mov8-setab-design/</link>
      <pubDate>Sat, 07 Dec 2019 03:03:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2019/12/controller-alu-mov8-setab-design/</guid>
      <description>In my last post I covered off the controller design for the GOTO instruction. Being as I’ve decided to implement the controller on a new set of PCB cards I need to transfer over the existing ALU, MOV8 &amp; SETAB instructions to the new controller design. At the relay level nothing really changes so I’ll just quickly recap the timing and implementations here using the new schematic style and then in my next post I can move on to putting the full controller schematic and PCB design together.</description>
    </item>
    <item>
      <title>Controller Design: GOTO Instruction</title>
      <link>https://relaycomputer.co.uk/posts/2019/11/controller-goto-design/</link>
      <pubDate>Sat, 30 Nov 2019 03:03:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2019/11/controller-goto-design/</guid>
      <description>With the sequencer now designed and constructed I’m much closer to getting branching working on my relay computer. The next hurdle is updating the controller cards so that they can fire the appropriate control lines at the right time as directed by the sequencer pulses. As a reminder here’s the GOTO instruction itself:
Branch/Call &amp; 16-bit Load Immediate GOTO 24 1 1 d s c z n x h h h h h h h h l l l l l l l l Branches to a given address if stated condition register flag(s) is set. Address of next instruction can optionally be saved in XY register. M register can also be loaded with 16-bit value (without jump).</description>
    </item>
    <item>
      <title>Branching: Opcode Timing</title>
      <link>https://relaycomputer.co.uk/posts/2019/10/branching-opcode-timing/</link>
      <pubDate>Sun, 06 Oct 2019 01:00:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2019/10/branching-opcode-timing/</guid>
      <description>In my last post I covered the design for the GOTO opcode which will enable my relay computer to perform branching, loops and so on. Here’s where I got to last time:
Branch/Call &amp; 16-bit Load Immediate GOTO 24 1 1 d s c z n x h h h h h h h h l l l l l l l l Branches to a given address if stated condition register flag(s) is set. Address of next instruction can optionally be saved in XY register. M register can also be loaded with 16-bit value (without jump).</description>
    </item>
    <item>
      <title>Branching: Opcode Design</title>
      <link>https://relaycomputer.co.uk/posts/2019/09/branching-opcode-design/</link>
      <pubDate>Mon, 23 Sep 2019 01:00:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2019/09/branching-opcode-design/</guid>
      <description>There’s been a common theme recently in the comments on my YouTube videos … people are ready to see my relay computer gain the power of branching and become a ‘proper’ computer … and that’s fair enough because that’s the point where the computer can do way more interesting things and run more complicated programs. Originally I was going to add new instructions to the computer in order of complexity but I don’t want to keep you (or I) waiting for the ‘main event’ any longer so it’s time to start designing the most complicated of all instruction classes … the ‘GOTO’.</description>
    </item>
    <item>
      <title>Fetch and Increment - Construction and Test</title>
      <link>https://relaycomputer.co.uk/posts/2018/01/fetch-and-increment-construction-and/</link>
      <pubDate>Tue, 16 Jan 2018 22:16:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2018/01/fetch-and-increment-construction-and/</guid>
      <description>This is a bit of a landmark moment … at least for the construction of my relay computer. For a long time now my blog posts have been leading up to the point where my computer will execute a program in memory without any further input from the user. Well, it’s this post where that finally happens and all that stands in the way is a tweak to the sequencer and an addition to the controller unit. Here I’ll just stick to the pictures (and a video of course) but the design of the sequencer/controller changes is covered in this previous post.</description>
    </item>
    <item>
      <title>Control Design: Fetch and Increment</title>
      <link>https://relaycomputer.co.uk/posts/2017/09/control-design-fetch-and-increment/</link>
      <pubDate>Sun, 17 Sep 2017 12:57:00 +0100</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2017/09/control-design-fetch-and-increment/</guid>
      <description>The design of the computer’s memory, incrementer and program counter are now complete but there’s one last piece of the ‘puzzle’ required to get the computer running a program. The controller now needs updating to orchestrate the ‘fetch and increment’ cycle. This cycle retrieves the next instruction from memory (into the instruction register) and then increments the program counter to point at the next instruction in memory. In this post I’ll cover the changes needed to the controller cards to implement this cycle.</description>
    </item>
    <item>
      <title>Sequencing &amp; Control Test</title>
      <link>https://relaycomputer.co.uk/posts/2016/05/sequencing-control-test/</link>
      <pubDate>Tue, 24 May 2016 21:12:00 +0100</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2016/05/sequencing-control-test/</guid>
      <description>It’s finally time to give all the cards created so far a test so I can check everything works together as expected. This represents quite a bit of a milestone as the computer can now perform a single ALU, SETAB or MOV-8 instruction. This means a user can technically run a program by entering and running each instruction in turn and although the computer is still a long way from completion with this latest round of functionality it’s a lot more usable than before.</description>
    </item>
    <item>
      <title>Controller Construction: MOV-8, ALU and SETAB</title>
      <link>https://relaycomputer.co.uk/posts/2016/01/controller-construction-mov-8-alu-and/</link>
      <pubDate>Fri, 01 Jan 2016 23:23:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2016/01/controller-construction-mov-8-alu-and/</guid>
      <description>So yea, it’s been a while since my last post … in fact it’s been just over six months. For some reason I decided I didn’t have enough to do in the evenings so had a crack at becoming an actuary. Needless to say I’ve been busy studying for my entry exams and so the computer took a back seat for a while. Exams are done for now though so the computer is back on and I’m back constructing to get the MOV8, ALU and SETAB instructions running.</description>
    </item>
    <item>
      <title>Control Design: MOV-8, ALU and SETAB (part 2 of 2)</title>
      <link>https://relaycomputer.co.uk/posts/2015/04/control-design-mov-8-alu-and-setab-part/</link>
      <pubDate>Sat, 04 Apr 2015 08:06:00 +0100</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2015/04/control-design-mov-8-alu-and-setab-part/</guid>
      <description>In part one of this two part post I introduced the design of the control relays for each of the MOV-8, ALU and SETAB instructions. With these in hand I can now move on to placing these on the control cards and wire everything together. That’s ‘cards’ rather than ‘card’ as the control relays will be spread over two cards just like the sequencer relays are. This is partly because there’s more relays than would fit on a single card but mainly because access to a wider range of busses is needed.</description>
    </item>
    <item>
      <title>Control Design: MOV-8, ALU and SETAB (part 1 of 2)</title>
      <link>https://relaycomputer.co.uk/posts/2015/03/control-design-mov-8-alu-and-setab-part/</link>
      <pubDate>Tue, 31 Mar 2015 22:26:00 +0100</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2015/03/control-design-mov-8-alu-and-setab-part/</guid>
      <description>Over the last five posts I’ve been building up the design of a set of cards so that the computer will be able to understand and perform the MOV-8, ALU and SETAB instructions. In this post I’m putting together the final piece of the jigsaw … the control card. This will take the instruction class from the decoder (which derives its result from the instruction register) along with the pulses generated by the sequencer to operate the various control lines of the computer as required.</description>
    </item>
    <item>
      <title>Sequencing &amp; Control Design: Overview</title>
      <link>https://relaycomputer.co.uk/posts/2014/09/sequencing-control-design-overview/</link>
      <pubDate>Fri, 19 Sep 2014 23:27:00 +0100</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2014/09/sequencing-control-design-overview/</guid>
      <description>I’ve now got my computer to a state where I can perform ALU operations and push values around the four registers by manually operating the various control lines. It’s time to move things on a bit now and work towards getting the computer to the point where given a specific instruction/op-code it can operate the control lines itself without further input from the user. Eventually the computer will be given a list of instructions to perform which it’ll work through step by step but for now the next milestone is to automate the operation of a single instruction.</description>
    </item>
  </channel>
</rss>
