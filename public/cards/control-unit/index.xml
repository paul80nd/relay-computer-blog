<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ALU Control Unit on Relay Computer</title>
    <link>https://relaycomputer.co.uk/cards/control-unit/</link>
    <description>Recent content in ALU Control Unit on Relay Computer</description>
    <generator>Hugo</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 16 Mar 2014 08:59:00 +0000</lastBuildDate>
    <atom:link href="https://relaycomputer.co.uk/cards/control-unit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ALU Construction: Completed Control Card Full Test</title>
      <link>https://relaycomputer.co.uk/posts/2014/03/alu-construction-completed-control-card/</link>
      <pubDate>Sun, 16 Mar 2014 08:59:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2014/03/alu-construction-completed-control-card/</guid>
      <description>The ALU Control Card is now complete and looks like this:
This card was, on the whole, much simpler and quicker to put together than previous cards (despite me initially messing up the zero detection relay positions). As the card isn’t too busy I’ve arranged the wiring away from the empty part of the card so there’s room for future expansion or modifications if needed in the future. Not entirely sure what they’d actually be but you never know.</description>
    </item>
    <item>
      <title>ALU Construction: Control Card Power Rails &amp; Wire Wrap</title>
      <link>https://relaycomputer.co.uk/posts/2014/03/alu-construction-control-card-power/</link>
      <pubDate>Fri, 14 Mar 2014 19:51:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2014/03/alu-construction-control-card-power/</guid>
      <description>I’ve been a bit short of time lately so I’ve been working on the ALU Control Card in little bursts … but after lots of these little bursts I’ve now got all the power rails and wire wrap done for this card.
Here’s the card as it currently stands:
… and this is how the power rails look on the solder side of the card …</description>
    </item>
    <item>
      <title>ALU Construction: Control Card Header Pins &amp; Relay Sockets</title>
      <link>https://relaycomputer.co.uk/posts/2014/03/alu-construction-control-card-header/</link>
      <pubDate>Tue, 04 Mar 2014 18:03:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2014/03/alu-construction-control-card-header/</guid>
      <description>Following on from the first two successfully completed ALU cards, for logic and arithmetic, it’s time to make a start on the control card (well, actually, the LEDs and connectors are already done from earlier but you get the gist). The control card performs three functions: control registers, function decoding and zero detection … and thankfully this card is much simpler than the previous two in terms of relay count and sheer amount of soldering so should come together relatively quickly.</description>
    </item>
    <item>
      <title>ALU Construction: LED Tests</title>
      <link>https://relaycomputer.co.uk/posts/2013/12/alu-construction-led-tests/</link>
      <pubDate>Fri, 06 Dec 2013 20:55:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2013/12/alu-construction-led-tests/</guid>
      <description>Following on from my last post I can now test the LEDs that have been soldered and hooked up to the header pins on each of the three ALU cards (Logic, Arithmetic and Control). As promised, here are the videos of said testing:
You might notice I’m prodding around slightly more carefully on the arithmetic and control cards … due to a lack of foresight I’ve ended up with every second header pin being a direct line to 0v … which is not great when the thing I’m holding has 12v at the tip. Luckily my power supply handles short circuits well but even the briefest of sparks can be a tad embarrassing. At some point I’ll chop off the extraneous header pins (as they’re not needed) to ensure I don’t accidentally wire-wrap to one of them later on.</description>
    </item>
    <item>
      <title>ALU Construction: LED Header Pins</title>
      <link>https://relaycomputer.co.uk/posts/2013/12/alu-construction-led-header-pins/</link>
      <pubDate>Thu, 05 Dec 2013 21:46:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2013/12/alu-construction-led-header-pins/</guid>
      <description>So far, in the construction of the three ALU cards (Logic, Arithmetic and Control) I’ve soldered down the connectors and LEDs. It’s now time to solder in some header pins and join them to the existing connectors and LEDs ready for wire-wrapping later.
You can get proper wire-wrap posts but they’re really expensive for what they are (mainly, I guess, because it’s quite an old-fashioned construction method). I’ve found, though, that header pins do the job just as well but being as they’re not as tall you can only get a maximum of two wraps on each pin. Incidentally, I’ve chosen wire-wrap for most of the cards inner connections as it allows easy and quick modifications and correction of errors (something that can be quite difficult with soldered connections or pretty impossible with etched PCBs). Additionally, I quite like the finished look you get with wire-wrap.</description>
    </item>
    <item>
      <title>ALU Construction: Connectors and LEDs</title>
      <link>https://relaycomputer.co.uk/posts/2013/12/alu-construction-connectors-and-leds/</link>
      <pubDate>Mon, 02 Dec 2013 18:05:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2013/12/alu-construction-connectors-and-leds/</guid>
      <description>As promised in my last post it’s finally time to get the soldering iron out and make a start on constructing the three cards that make up the ALU. I’m going start by laying down the connectors and LEDs on each card to make sure I’m happy with the look and feel of things and then I can move on to everything else needed later.
As mentioned in earlier posts I’m basing my construction around 55 x 40 hole pad boards which fit my designs quite nicely at the right sort of size I’m looking to construct at. The connectors are right angled box headers and are simply soldered down to the back of the boards whilst the LEDs run along the front. The LEDs themselves are 3mm 12V types so that an additional resistor is not required (which would make the ‘crammed in’ Logic unit design even more tricky) and to make construction a bit more manageable each LED sits in a right angled holder.</description>
    </item>
    <item>
      <title>ALU Design: Control Unit</title>
      <link>https://relaycomputer.co.uk/posts/2013/12/alu-design-control-unit/</link>
      <pubDate>Sun, 01 Dec 2013 21:21:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2013/12/alu-design-control-unit/</guid>
      <description>In the last three posts I introduced the design for the 3-to-8 Function Decoder, Zero Detect circuit and the Condition Registers. In this post I’ll put all three of these components together to make up the ALU Control Card. So, placing the relays from the three components onto the card (excluding wire links) we get the following:
ALU Control Card Relays (larger) Unlike the other cards that make up the full ALU (the logic and arithmetic cards) things aren’t quite so tightly packed in this time. Despite this I’ve pushed the relays out towards the edges of the card to leave room for any future ALU control expansion or modifications without requiring an extra card. I’ll be displaying the current state of the 3-to-8 Decoder and Condition Registers with LEDs along the front of the card as with the other cards designed so far. The LEDs are the same 12V ones as before (to save space that would be used by the additional resistors) and follow the same colour code of red for results, yellow for inputs and green for output control signals. Diagram wise the display looks like this:</description>
    </item>
    <item>
      <title>ALU Design: Condition Registers</title>
      <link>https://relaycomputer.co.uk/posts/2013/11/alu-design-condition-registers/</link>
      <pubDate>Sat, 30 Nov 2013 10:12:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2013/11/alu-design-condition-registers/</guid>
      <description>This post covers the design of the ALU Condition Registers which along with the 3-to-8 Function Decoder and Zero Detect circuit (both covered in my previous posts) make up the ALU Control Card. There are three Condition Registers in this computer:
Carry: set when a bit is carried in the Arithmetic Unit (which can also indicate arithmetic overflow depending on the interpretation of the numbers being added). Zero: set when the ALU result is zero (all bits are off). Sign: set when the most significant bit is set (which would indicate a negative result for signed values). This condition has no direct meaning for unsigned numbers (other than indicating the number has a value of 128 or more). When the ALU performs an operation the current values of these three conditions are stored in the condition registers so that they can be referred to in other operations. An example of this would be where given two numbers the first is negated and then added to the second … if the two numbers are equal it will result in zero and therefore the Zero condition will be set. Based on this condition register being set you could then branch to a different location in the executing program if desired. That is, for example, if number A and B are equal then go to line C in the program. It’s this ‘branching’ functionality that elevates the computer in terms of power and flexibility and the condition registers are at the heart of this.</description>
    </item>
    <item>
      <title>ALU Design: Zero Detect</title>
      <link>https://relaycomputer.co.uk/posts/2013/11/alu-design-zero-detect/</link>
      <pubDate>Sat, 23 Nov 2013 08:57:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2013/11/alu-design-zero-detect/</guid>
      <description>This post covers the design of the Zero Detect circuit which along with the 3-to-8 Function Decoder (covered in my last post) and the Condition Registers (next post) make up the ALU Control Card. The Zero Detect circuit … wait for it … detects when a value is zero. The value in question is taken from the data bus so in effect we’re detecting when no bits are set. The output from this circuit is then passed to the Condition Registers so that the current value can be stored for future operations. The circuit itself is nice and simple:</description>
    </item>
    <item>
      <title>ALU Design: Function Decoder</title>
      <link>https://relaycomputer.co.uk/posts/2013/11/design-function-decoder/</link>
      <pubDate>Wed, 20 Nov 2013 22:18:00 +0000</pubDate>
      <guid>https://relaycomputer.co.uk/posts/2013/11/design-function-decoder/</guid>
      <description>This post covers the design of a 3-to-8 Function Decoder which along with the Zero Detect circuit and Condition Registers will all go in to the ALU Control Card. The Decoder takes a 3-bit ALU Function code as its input and activates 1 of 8 control lines accordingly. The function codes are as follows:
Code Operation Description 000 CLR Clear/No Operation 001 ADD B &#43; C 010 INC Increment B 011 AND B AND C 100 OR B OR C 101 XOR B XOR C 110 NOT NOT C 111 SHL Shift Left B The control lines which are fed to the Arithmetic and Logic Units via the Ctrl-Z bus are:</description>
    </item>
  </channel>
</rss>
